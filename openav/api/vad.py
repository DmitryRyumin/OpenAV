#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Детектирование речевой активности в аудиовизуальном сигнале
"""

import os
import sys
PATH_TO_SOURCE = os.path.abspath(os.path.dirname(__file__))
PATH_TO_ROOT = os.path.join(PATH_TO_SOURCE, '..', '..')

sys.path.insert(0, os.path.abspath(PATH_TO_ROOT))

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
# Подавление Warning
import warnings
for warn in [UserWarning, FutureWarning]: warnings.filterwarnings('ignore', category = warn)

from dataclasses import dataclass # Класс данных

# Типы данных
from types import ModuleType

# Персональные
import openav                            # Библиотека в целом
from openav.modules.lab.build import Run # Сборка библиотеки
from openav import rsrs                  # Ресурсы библиотеки

# ######################################################################################################################
# Сообщения
# ######################################################################################################################
@dataclass
class MessagesVAD:
    """Класс для сообщений"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __post_init__(self):
        pass


# ######################################################################################################################
# Выполняем только в том случае, если файл запущен сам по себе
# ######################################################################################################################
@dataclass
class RunVAD(MessagesVAD):
    """Класс для детектирования речевой активности в аудиовизуальном сигнале"""

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __post_init__(self):
        super().__post_init__() # Выполнение конструктора из суперкласса

    # ------------------------------------------------------------------------------------------------------------------
    #  Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    # Запуск
    @staticmethod
    def run(metadata: ModuleType = openav, resources: ModuleType = rsrs, out = True) -> bool:
        """Запуск детектирования речевой активности в аудиовизуальном сигнале

        Args:
            metadata (ModuleType): Модуль из которого необходимо извлечь информацию
            resources (ModuleType): Модуль с ресурсами
            out (bool): Печатать процесс выполнения

        Returns:
             bool: **True** если детектирование речевой активности в аудиовизуальном сигнале произведено успешно,
                   в обратном случае **False**
        """

        # Сборка библиотеки
        build = Run(lang = 'ru')

        # Очистка консоли перед выполнением
        if build.clear_shell(cls = True, out = True) is False: return False

        # Проверка аргументов
        if not isinstance(metadata, ModuleType) or not isinstance(resources, ModuleType) or type(out) is not bool:
            # Вывод сообщения
            if out is True: build.inv_args(__class__.__name__, RunVAD.run.__name__)
            return False


def main():
    RunVAD.run()


if __name__ == "__main__":
    main()
