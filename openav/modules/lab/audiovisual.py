#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Мультимодальное объединение аудио- и видеомодальностей
"""

# ######################################################################################################################
# Импорт необходимых инструментов
# ######################################################################################################################
# Подавление Warning
import warnings

for warn in [
    UserWarning,
    FutureWarning,
]:
    warnings.filterwarnings(
        "ignore",
        category=warn,
    )

import os
import glob

from dataclasses import (
    dataclass,
)  # Класс данных

# Персональные
from openav.modules.lab.audio import (
    Audio,
)  # Аудиомодальность
from openav.modules.lab.video import (
    Video,
)  # Видеомодальность

# ######################################################################################################################
# Константы
# ######################################################################################################################


# ######################################################################################################################
# Сообщения
# ######################################################################################################################
@dataclass
class AVMessages(Audio, Video):
    """Класс для сообщений

    Args:
        path_to_logs (str): Смотреть :attr:`~openav.modules.core.logging.Logging.path_to_logs`
        lang (str): Смотреть :attr:`~openav.modules.core.language.Language.lang`
    """

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __post_init__(self):
        super().__post_init__()  # Выполнение конструктора из суперкласса


# ######################################################################################################################
# Видео
# ######################################################################################################################
@dataclass
class AV(AVMessages):
    """Класс для мультимодального объединения аудио- и видеомодальностей

    Args:
        path_to_logs (str): Смотреть :attr:`~openav.modules.core.logging.Logging.path_to_logs`
        lang (str): Смотреть :attr:`~openav.modules.core.language.Language.lang`
    """

    # ------------------------------------------------------------------------------------------------------------------
    # Конструктор
    # ------------------------------------------------------------------------------------------------------------------

    def __post_init__(self):
        super().__post_init__()  # Выполнение конструктора из суперкласса

    # ------------------------------------------------------------------------------------------------------------------
    # Свойства
    # ------------------------------------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------------------------------------
    # Внутренние методы (приватные)
    # ------------------------------------------------------------------------------------------------------------------

    def __get_hierarchy_from_paths(self, paths):
        hierarchies = []

        for path in paths:
            hierarchy = []
            while True:
                path, dir_name = os.path.split(path)
                if not dir_name:
                    hierarchy.append(path)
                    break
                hierarchy.append(dir_name)
            hierarchies.append(hierarchy)

        return hierarchies

    # ------------------------------------------------------------------------------------------------------------------
    # Внутренние методы (защищенные)
    # ------------------------------------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------------------------------------
    # Внешние методы
    # ------------------------------------------------------------------------------------------------------------------

    def train_audiovisual(
        self,
        out: bool = True,
    ) -> bool:
        """Автоматическое обучение на аудиовизуальных данных

        Args:
            out (bool) Отображение

        Returns:
            bool: **True** если автоматическое обучение на аудиовизуальных данных произведено, в обратном случае
            **False**
        """

        try:
            # Проверка аргументов
            if type(out) is not bool:
                raise TypeError
        except TypeError:
            self.inv_args(__class__.__name__, self.train_audiovisual.__name__, out=out)
            return False
        else:
            paths = glob.glob(os.path.join(self.path_to_dataset, "*/*/*/*.mp4"))

            nested_paths = self.get_paths(self.path_to_dataset, depth=2, out=False)

            print(len(paths))
            print(self.__get_hierarchy_from_paths(nested_paths))
